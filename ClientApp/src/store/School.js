import {makeApiCall} from "../utils/ApiHelper"
import { startLoading, stopLoading } from "./Loading";
import {createError} from "./Error";
const requestMath = "REQUEST_MATH";
const requestRead = "REQUEST_READ";
const requestBusiness = "REQUEST_BUSINESS";
const requestFunding = "REQUEST_FUNDING";
const requestGeo = "REQUEST_GEO";
const requestIncome = "REQUEST_INCOME";
const requestIndex = "REQUEST_INDEX";
const requestTeacherRatios = "REQUEST_TEACHER_RATIOS";
const requestTitle1 = "REQUEST_TITLE1";
const clearAll = "CLEAR_ALL";

const initalState = 
    {Math_Scores:undefined, 
        Read_Scores:undefined,
        Business:undefined,
        Funding:undefined,
        Geo:undefined,
        Income:undefined,
        Index:undefined,
        TeacherRatios:undefined,
        Title1:undefined
    };
async function processRequest(url, dispatch){
		dispatch({type:startLoading});
		try{
        	const result = await makeApiCall(url);
        	dispatch({type:stopLoading});
			return result;
		}catch(e){
			dispatch({type:createError, errorMessage:e.message});
        	dispatch({type:stopLoading});
		}
}

export const actionCreators = {
    requestMath:ncessch => async (dispatch, getState)=>{
        const url = `api/Math/${ncessch}`;
		const result =await processRequest(url, dispatch);
        dispatch({type:requestMath, Math_Scores:result});
    }, requestRead:ncessch => async (dispatch, getState)=>{
        const url = `api/Read/${ncessch}`;
        const scores = await processRequest(url, dispatch);
        dispatch({type:requestRead, Read_Scores:scores});
    }, requestBusiness:zipcode => async (dispatch, getState)=>{
        const url = `api/Business/${zipcode}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestBusiness, Business:result});
    }, requestFunding:leaid => async (dispatch, getState)=>{
        const url = `api/Funding/${leaid}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestFunding, Funding:result});
    }, requestGeo:ncessch => async (dispatch, getState)=>{
        const url = `api/Geo/${ncessch}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestGeo, Geo:result});
    }, requestIncome:zipcode => async (dispatch, getState)=>{
        const url = `api/Income/${zipcode}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestIncome, Income:result});
    },  requestIndex:ncessch => async (dispatch, getState)=>{
        const url = `api/Index/${ncessch}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestIndex, Index:result});
    }, requestTeacherRatios:ncessch => async (dispatch, getState)=>{
        const url = `api/TeacherRatios/${ncessch}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestTeacherRatios, TeacherRatios:result});
    }, requestTitle1:ncessch => async (dispatch, getState)=>{
        const url = `api/Title1/${ncessch}`;
        const result = await processRequest(url,dispatch);
        dispatch({type:requestTitle1, Title1:result});
    }, clearAll:()=> (dispatch, getState)=>{
		dispatch({type:clearAll});
	}
}


/**
 * @function reducer handles the actions generated by the action creates and
 * updates that state as needed.
 */
export const reducer = (state, action)=>{
    switch(action.type){
        case requestMath:
            return {...state, Math_Scores:action.Math_Scores};
        case requestRead:
            return {...state, Read_Scores: action.Read_Scores};
        case requestBusiness:
            return {...state, Business: action.Business};
        case requestFunding:
            return {...state, Funding: action.Funding};
        case requestGeo:
            return {...state, Geo:action.Geo};
        case requestIncome:
            return {...state, Income:action.Income};
        case requestIndex:
            return {...state, Index:action.Index};
        case requestTeacherRatios:
            return {...state, TeacherRatios:action.TeacherRatios};
        case requestTitle1:
            return {...state, Title1:action.Title1};
		case clearAll:
			return initalState;
        default:
            return state || initalState;
    }
}
